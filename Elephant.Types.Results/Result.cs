// <auto-generated />
#nullable enable
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Net;
using Elephant.Types.Results.Abstractions;

namespace Elephant.Types.Results
{
	/// <inheritdoc cref="IResult{TData}"/>
	[SuppressMessage("Microsoft.StyleCop.CSharp.OrderingRules", "SA1402:FileMayOnlyContainASingleType", Justification = "Generic and non-generic version belong together.")]
	public partial class Result<TData> : IResult<TData>
	{
		/// <summary>
		/// Unauthorized HTTP error status code.
		/// </summary>
		/// <remarks>.NET standard 2.0 does not have it in its enum <see cref="HttpStatusCode"/>, it was added later.</remarks>
		private const int Status422UnprocessableEntity = 422;

		/// <inheritdoc/>
		public bool IsSuccess => IsSuccessStatusCode(ResultStatuses);

		/// <inheritdoc/>
		public bool IsError => IsErrorStatusCode(ResultStatuses);

		/// <inheritdoc/>
		public string? Message => GetResultStatus(ResultStatuses).Message;

		/// <inheritdoc/>
		public TData? Data => GetResultStatus(ResultStatuses).Data;

		/// <inheritdoc/>
		public int StatusCode => GetStatusCode(ResultStatuses);

		/// <inheritdoc/>
		public bool IsInformativeRedirectionOrCustom => IsInformativeRedirectionOrCustomStatusCode(ResultStatuses);

		/// <summary>
		/// All result statuses.
		/// </summary>
		protected List<IResultStatus<TData>> ResultStatuses = new List<IResultStatus<TData>>();

		/// <inheritdoc/>
		public bool UsesData { get; protected set; } = true;

		#region Constructors

		/// <summary>
		/// Default constructor that will use the <see cref="DefaultStatus"/> if no <see cref="IResultStatus{TData}"/> is added later.
		/// </summary>
		public Result()
		{
		}

		/// <summary>
		/// Success constructor with data.
		/// </summary>
		public Result(TData? data)
		{
			ResultStatuses.Add(new ResultStatus<TData>(data));
		}

		/// <summary>
		/// Constructor with initializers.
		/// </summary>
		public Result(TData? data, int statusCode, string? message = null)
		{
			ResultStatuses.Add(new ResultStatus<TData>(data, statusCode, message));
		}

		#endregion

		#region Helpers

		/// <summary>
		/// Default status to return when there's no status.
		/// This implementation returns a 200 success status.
		/// </summary>
		protected virtual IResultStatus<TData> DefaultStatus()
		{
			return new ResultStatus<TData>(default, (int)HttpStatusCode.OK, null);
		}

		/// <summary>
		/// Returns true if the status code is a success status code.
		/// </summary>
		private bool IsSuccessStatusCode(IEnumerable<IResultStatus<TData>> resultStatuses)
		{
			return GetResultStatus(resultStatuses).IsSuccess;
		}

		/// <summary>
		/// Returns true if the status code is an error status code.
		/// </summary>
		private bool IsErrorStatusCode(IEnumerable<IResultStatus<TData>> resultStatuses)
		{
			return GetResultStatus(resultStatuses).IsError;
		}

		/// <summary>
		/// Indicates if the operations were neither successful nor unsuccessful (thus, is informative, redirectional or custom).
		/// </summary>
		private bool IsInformativeRedirectionOrCustomStatusCode(List<IResultStatus<TData>> resultStatuses)
		{
			return GetResultStatus(resultStatuses).IsInformativeRedirectionOrCustom;
		}

		/// <summary>
		/// Get the leading <see cref="IResultStatus{TData}"/> from a collection of <see cref="IResultStatus{TData}"/>.
		/// If the collection is empty then a default status will be returned from <see cref="DefaultStatus"/>.
		/// </summary>
		protected IResultStatus<TData> GetResultStatus(IEnumerable<IResultStatus<TData>> resultStatuses)
		{
			if (!resultStatuses.Any())
				return DefaultStatus();

			// Attempt to get the first error first.
			IResultStatus<TData>? result = resultStatuses.FirstOrDefault(status => status.IsError);
			if (result != null)
				return result;

			// Atempt to get the first success.
			result = resultStatuses.FirstOrDefault(status => status.IsSuccess);
			if (result != null)
				return result;

			// There are no errors and no succes statuses. Just return the first.
			return resultStatuses.First();
		}

		/// <summary>
		/// Get the leading HTTP status code from a list of HTTP status codes.
		/// </summary>
		protected virtual int GetStatusCode(IEnumerable<IResultStatus<TData>> resultStatuses)
		{
			return GetResultStatus(resultStatuses).StatusCode;
		}

		#endregion

		#region Clearing

		/// <summary>
		/// Clear all <see cref="ResultStatuses"/>.
		/// </summary>
		public virtual void ClearAllResultStatuses()
		{
			ResultStatuses.Clear();
		}

		/// <summary>
		/// Clear all success <see cref="ResultStatuses"/>.
		/// </summary>
		public virtual void ClearAllSuccessStatuses()
		{
			ResultStatuses.RemoveAll(status => status.IsSuccess);
		}

		/// <summary>
		/// Clear all error <see cref="ResultStatuses"/>.
		/// </summary>
		public virtual void ClearAllErrorStatuses()
		{
			ResultStatuses.RemoveAll(status => status.IsError);
		}

		/// <summary>
		/// Clear all informative, redirection and custom <see cref="ResultStatuses"/>.
		/// </summary>
		public virtual void ClearAllInformativeRedirectionandCustomStatuses()
		{
			ResultStatuses.RemoveAll(status => status.IsInformativeRedirectionOrCustom);
		}

		#endregion
	}

	/// <summary>
	/// <see cref="Result"/> without data.
	/// </summary>
	public class Result : Result<bool>, IResult
	{
		/// <summary>
		/// Success constructor.
		/// </summary>
		public Result()
		{
			UsesData = false;
		}

		/// <summary>
		/// Constructor with initializers.
		/// </summary>
		public Result(int statusCode, string? message = null)
		{
			UsesData = false;
			ResultStatuses.Add(new ResultStatus<bool>(false, statusCode, message));
		}
	}
}
